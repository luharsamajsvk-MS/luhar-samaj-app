const express = require('express');
const router = express.Router();
const auth = require('../middleware/auth');
const Member = require('../models/Member');
const Zone = require('../models/Zone');

// ðŸ”¹ Helper: compute zone distribution with aggregation
// This is used by your /zones-distribution route
async function getZoneDistribution() {
Â  return Member.aggregate([
    // ðŸ”» --- FIX 1: Filter out deleted members --- ðŸ”»
Â  Â  {
Â  Â  Â  $match: { isDeleted: { $ne: true } }
Â  Â  },
    // ðŸ”º --- END FIX --- ðŸ”º
Â  Â  {
Â  Â  Â  $group: {
Â  Â  Â  Â  _id: "$zone",
Â  Â  Â  Â  // This helper still counts head + family, as it's a separate route
Â  Â  Â  Â  totalPeople: {
Â  Â  Â  Â  Â  $sum: { $add: [1, { $size: { $ifNull: ["$familyMembers", []] } }] }
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  },
Â  Â  {
Â  Â  Â  $lookup: {
Â  Â  Â  Â  from: "zones",
Â  Â  Â  Â  localField: "_id",
Â  Â  Â  Â  foreignField: "_id",
Â  Â  Â  Â  as: "zone"
Â  Â  Â  }
Â  Â  },
Â  Â  { $unwind: "$zone" },
Â  Â  {
Â  Â  Â  $project: {
Â  Â  Â  Â  _id: 0,
Â  Â  Â  Â  name: "$zone.name",
Â  Â  Â  Â  totalPeople: 1
Â  Â  Â  }
Â  Â  }
Â  ]);
}

// Main Dashboard Data
router.get('/', auth, async (req, res) => {
Â  try {
Â  Â  // ðŸ”» --- FIX 2: Filtered total member (family) count --- ðŸ”»
Â  Â  const totalMembers = await Member.countDocuments({ isDeleted: { $ne: true } });
    // ðŸ”º --- END FIX --- ðŸ”º
Â  Â  const totalZones = await Zone.countDocuments();

Â  Â  // Single aggregation for all other stats
Â  Â  const statsAgg = await Member.aggregate([
    // ðŸ”» --- FIX 3: Filter out deleted members at the start --- ðŸ”»
Â  Â  Â  {
Â  Â  Â  Â  $match: { isDeleted: { $ne: true } }
Â  Â  Â  },
    // ðŸ”º --- END FIX --- ðŸ”º
Â  Â  Â  { 
Â  Â  Â  Â  $addFields: {
Â  Â  Â  Â  Â  // Create a single array of ONLY family members (as requested)
Â  Â  Â  Â  Â  allPeople: { 
Â  Â  Â  Â  Â  Â  $ifNull: ["$familyMembers", []]
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  $facet: {
Â  Â  Â  Â  Â  // Pipeline 1: Get counts for male, female (from family members)
Â  Â  Â  Â  Â  "genderCounts": [
Â  Â  Â  Â  Â  Â  { $unwind: "$allPeople" },
Â  Â  Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  Â  Â  $group: {
Â  Â  Â  Â  Â  Â  Â  Â  _id: "$allPeople.gender",
Â  Â  Â  Â  Â  Â  Â  Â  count: { $sum: 1 }
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  ],
Â  Â  Â  Â  Â  // Pipeline 2: Get total people count (from family members)
Â  Â  Â  Â  Â  "totalPeopleCount": [
Â  Â  Â  Â  Â  Â  { $unwind: "$allPeople" },
Â  Â  Â  Â  Â  Â  { $count: "count" }
Â  Â  Â  Â  Â  ],
Â  Â  Â  Â  Â  // Pipeline 3: Get zone distribution (from family members)
Â  Â  Â  Â  Â  "zoneDistribution": [
Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  $group: {
Â  Â  Â  Â  Â  Â  Â  Â  _id: "$zone",
Â  Â  Â  Â  Â  Â  Â  Â  totalPeople: { $sum: { $size: "$allPeople" } }
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  { $lookup: { from: "zones", localField: "_id", foreignField: "_id", as: "zone" } },
Â  Â  Â  Â  Â  Â  { $unwind: { path: "$zone", preserveNullAndEmptyArrays: true } },
Â  Â  Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  Â  Â  $project: { 
Â  Â  Â  Â  Â  Â  Â  Â  _id: 0,
Â  Â  Â  Â  Â  Â  Â  Â  name: { $ifNull: ["$zone.name", "Unknown"] }, 
Â  Â  Â  Â  Â  Â  Â  Â  totalPeople: 1 
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  ]);

Â  Â  // --- Process the results from the $facet pipeline ---
Â  Â  const results = statsAgg[0];

Â  Â  let totalMales = 0;
Â  Â  let totalFemales = 0;
Â  Â  results.genderCounts.forEach(group => {
Â  Â  Â  if (group._id === 'male') {
Â  Â  Â  Â  totalMales = group.count;
Â  Â  Â  } else if (group._id === 'female') {
Â  Â  Â  Â  totalFemales = group.count;
Â  Â  Â  }
Â  Â  });
Â  Â  
Â  Â  const totalPeople = results.totalPeopleCount[0]?.count || 0;
Â  Â  const zoneDistribution = results.zoneDistribution; 

Â  Â  // Send the final JSON response
Â  Â  res.json({
Â  Â  Â  totalMembers, // Total *active* families
Â  Â  Â  totalPeople,  // Total people from *active* familyMembers
Â  Â  Â  totalZones,
Â  Â  Â  totalMales,     // Total males from *active* familyMembers
Â  Â  Â  totalFemales,   // Total females from *active* familyMembers
Â  Â  Â  zoneDistribution // Zone distribution based on *active* familyMembers
Â  });

Â  } catch (err) {
Â  Â  console.error('Dashboard fetch error:', err);
Â  Â  res.status(500).json({ error: err.message });
Â  }
});

// Separate API: People distribution by zone (from your original code)
router.get('/zones-distribution', auth, async (req, res) => {
Â  try {
Â  Â  const data = await getZoneDistribution();
Â  Â  res.json(data);
Â  } catch (err) {
Â  Â  console.error('Error fetching zone distribution:', err);
Â  Â  res.status(500).json({ error: 'Server error' });
Â  }
});

module.exports = router;